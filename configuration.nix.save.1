{ config, pkgs, lib, ... }:
 
{
  imports = [
    ./hardware-configuration.nix
    <home-manager/nixos>
    ./sound.nix
    ./networking.nix
    ./locals.nix
    ./kernel.nix
    ./boot.nix
    ./home.nix
    ./kde.nix
    ./firefox.nix
  ];

  environment.systemPackages = with pkgs; [
    wget
    ffmpeg
    sl
    nyancat
    git
    curl
    ranger
    glances
    distrobox
    vlc
    nano
    bsdgames
    chkrootkit
    lynis
    pciutils
    cmatrix
    nurl
    home-manager
  ];
	    
  nixpkgs.config.allowUnfree = true;
  programs.light.enable = true;
  nix.settings.allowed-users = [ "jabbu" ];
  nix.settings.auto-optimise-store = true;
  nix.settings.experimental-features = [ "nix-command" "flakes" ];
  programs.dconf.enable = true;
                           
  hardware.rtl-sdr.enable = true;
  powerManagement.enable = true;
  time.hardwareClockInLocalTime = true;
  
  nixpkgs.config.packageOverrides = pkgs: {
    nur = import (builtins.fetchTarball "https://github.com/nix-community/NUR/archive/master.tar.gz") {
      inherit pkgs;
    };
  };

  # Automatic upgrades
  system.autoUpgrade.enable = true;
  system.autoUpgrade.channel = "https://channels.nixos.org/nixos-unstable";

  # Font config
  fonts.fonts = with pkgs; [
    hack-font
    source-code-pro
  ];

  # Enable CUPS to print documents.
  services.printing.enable = true;
  services.avahi.enable = true;
  services.avahi.nssmdns = true;
  # for a WiFi printer
  services.avahi.openFirewall = true;

  # Define a user account.
  users = {
    defaultUserShell = pkgs.zsh;
    mutableUsers = false;
    users.jabbu = {
      isNormalUser = true;
      home = "/home/jabbu";
      extraGroups = [ "networkmanager" "wheel" "video" "audio" "lp" "scanner" "podman" "plugdev" "libvirtd" ];
      shell = pkgs.zsh;
    };
  };
  programs.zsh.enable = true;

 # Podman
  virtualisation = {
    podman = {
      enable = true;

      # Create a `docker` alias for podman, to use it as a drop-in replacement
      dockerCompat = true;

      # Required for containers under podman-compose to be able to talk to each other.
      defaultNetwork.settings.dns_enabled = true;
      dockerSocket.enable = true;
    };

    vmware.guest.enable = true;
  };

  #Copy system config, so I can make a backup 
  system.copySystemConfiguration = true;
  
  system.stateVersion = "23.05"; # Did you read the comment?
  
  #SElinux is better then apparmour security wise, but apprmor is more engrained in the Nix ecosystem.
  security.apparmor.enable = true;
  security.apparmor.killUnconfinedConfinables = true;

  #No default packages
  environment.defaultPackages = lib.mkForce [];

  # Setup keyfile
  boot.initrd.secrets = {
    "/crypto_keyfile.bin" = null;
  };
}
